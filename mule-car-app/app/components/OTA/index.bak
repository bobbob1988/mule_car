import React, { Component } from 'react';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/interval';
import 'rxjs/add/operator/timeInterval';
import * as d3 from "d3";
import * as d3ScaleChromatic from 'd3-scale-chromatic';
import { scaleSqrt, scaleThreshold, select, arc, scaleLinear, interpolate, scaleLog, line, polyline, range, easeCubicInOut, easeCircle} from 'd3';
import styles from './OTA.css';

import axios from 'axios';
//Correct the style loader to match the webpack
import '!style-loader!css-loader!bootstrap/dist/css/bootstrap.css';

import { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';

export default class OTAMain extends Component {

 constructor(){
    super();
    this.state = { 
      teams: [],
      selectedVersion: "",
      validationError: ""
  };
}

componentDidMount() {
    fetch("http://10.21.71.39:8000/ADAS/nexus_data")
    .then((response) => {
        //console.log(response.json())
        return response.json();
    })
    .then(data => {
        console.log(data)
        let teamsFromApi = data.nexus_version.map(team => { return {value: team, display: team} })
        this.setState({ teams: [{value: '', display: '(Select your version)'}].concat(teamsFromApi) });
    }).catch(error => {
        console.log(error);
    });
}

handleClick = (param) => (e) => { 
  console.log('Event', e);
  console.log('Parameter', param);
  fetch("http://10.21.71.39:8000/ADAS/nexus_data/download", {
    method: 'post',
    headers: {
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({versionNumber: param, str: 'Some string: &=&'})
})
 .then((resp) => {
    return resp.json()
}) 
 .then((data) => {
    console.log(data)                    
})
 .catch((error) => {
    console.log(error, "catch the hoop")
})
}

render() {
    return (
      <div>
      <select value={this.state.selectedTeam} 
      onChange={(e) => this.setState({selectedVersion: e.target.value, validationError: e.target.value === "" ? "You must select your version" : ""})}>
      {this.state.teams.map((team) => <option key={team.value} value={team.value}>{team.display}</option>)}
        </select>
        <div style={{color: 'red', marginTop: '5px'}}>
        {this.state.validationError}
        {this.state.selectedVersion}
        </div>
        <button onClick={this.handleClick(this.state.selectedVersion)}>Download</button>
        <br/>
        <button onClick={this.handleClick(this.state.selectedVersion)}>Update</button>
        </div>

        )
    }

}
